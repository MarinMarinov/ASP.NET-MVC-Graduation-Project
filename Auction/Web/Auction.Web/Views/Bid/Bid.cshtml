@model global::Auction.Web.ViewModels.Auction.ActiveAuctionViewModel
@{
    ViewBag.Title = "Bid";
}

<h2>Bidding Area</h2>

<div class="container">
    <div class="row">
        <div class="col">
            <div class="col-md-3">
                <h3 class="text-left"><span class="label label-danger">Auction details</span></h3>
                <p class="text-info alert alert-info">Auction Title: <b>@Model.Name</b></p>
                <p class="text-info alert alert-info">Initial Price: <b>@Model.InitialPrice</b></p>
                <p class="text-info alert alert-info">Bid Step: <b>@Model.BidStep</b></p>

                @foreach (var item in Model.Items)
                {
                    <p class="text-info alert alert-info">Item Title: <b>@item.Title</b></p>
                    <p class="text-info alert alert-info">Item Type: <b>@item.Type</b></p>
                }
            </div>
            <div class="col-md-4">
                @using (Ajax.BeginForm("SendMessage", "Bid", new { area = "" }, new AjaxOptions { HttpMethod = "GET" }))
                {
                    <div class="form-group col-md-12" style="background-color: #e9e9e9">
                        <div class="row">
                            <div class="col">
                                <div class="col-md-5">
                                    <h3 class="text-left"><span class="label label-danger">Bid Area</span></h3>
                                </div>
                                <div class="col-md-5">
                                    <h3>
                                        <input type="submit" id="sendmessage" value="Send" class="btn btn-danger" />
                                    </h3>
                                </div>

                            </div>
                        </div>
                        @Html.LabelFor(m => m.ReceiverId, new { @class = "control-label" })
                        @Html.DropDownListFor(m => m.Bidders, ViewBag.Bidders as IEnumerable<SelectListItem>, new { @class = "form-control", id = "ReceiverId" })

                        <br />
                        @Html.LabelFor(m => m.Value, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.Value, null, new { name = "value", @class = "form-control", @type = "number" })

                        <br />
                        @Html.LabelFor(m => m.InitialPrice, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.InitialPrice, null, new { name = "initialPrice", @class = "form-control", @type = "number" })

                        <br />
                        @Html.LabelFor(m => m.CurrentPrice, new { @class = "control-label" })
                        @Html.TextBoxFor(m => m.CurrentPrice, null, new { name = "currentPrice", @class = "form-control", @type = "number" })

                        <br />
                        @Html.LabelFor(m => m.Id, new { id = "auctionId", name = "auctionId", @class = "control-label", value = this.Model.Id })
                        @Html.TextBoxFor(m => m.Id, null, new { name = "currentPrice", @class = "form-control", @type = "number" })

                        <br />
                        @if (this.User.IsInRole("Admin"))
                        {
                            @Html.LabelFor(m => m.WinnerId, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.Bidders, ViewBag.Bidders as IEnumerable<SelectListItem>, "None", new { @class = "form-control", id = "WinnerId" })
                        }
                        <br />
                    </div>
                }
                @if (this.User.IsInRole("Admin"))
                {
                    @Html.ActionLink("Close Auction", "CloseAuction", "Bid", new { isActive = true, auctionId = this.Model.Id }, new { @class = "btn btn-danger" })
                    <div class="clearfix"></div>
                }
            </div>

            <div class="col-md-5">
                <h3 class="text-left"><span class="label label-danger">Bidding history</span></h3>
                <ul id="discussion">
                    @Html.Action("LoadChatHistory")
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    // Messenger
    $(function () {
        // Declare a proxy to reference the hub.
        var chat = $.connection.auctionRoom;
        chat.logging = true;
        // Create a function that the hub can call to broadcast messages.
        chat.client.broadcastMessage = function (sentOn, bidderName, value, currentPrice, winnerUsername) {
            // Html encode display name and message.
            var encodedSentOn = $('<div />').text(sentOn).html();
            var encodedName = $('<div />').text(bidderName).html();

            debugger;

            var encodedValue = '';
            if (value !== 0) {
                encodedValue = $('<div />').text(value).html();
            };

            var encodedCurrentPrice = $('<div />').text(currentPrice).html();
            $('#CurrentPrice').val(currentPrice);

            var encodedWinnerTag = '';
            if (winnerUsername !== '') {
                encodedWinnerTag = '<p><strong>The WINNER is: ' + winnerUsername + '</strong></p>';
            };

            // Add the message to the page.
            $('#discussion').prepend(
               '<li class="list-group-item">' +
                    '<div class="well well-lg">' +
                    '<p><strong>' + encodedSentOn + '</strong></p>' +
                    '<p><strong>' + encodedName + '</strong></p>' +
                    '<p><strong>' + encodedValue + '</strong></p>' +
                    '<p><strong>Current price: ' + encodedCurrentPrice + '</strong></p>' +
                    encodedWinnerTag +
                    '</div>' +
                    '</li>');
        };

        $('#message').focus();
        // Start the connection.
        $.connection.hub.start().done(function () {
            $('#sendmessage').click(function () {
                // Call the Send method on the hub.
                var receiverId = $('#ReceiverId').val();
                var value = parseInt($('#Value').val());
                var initialPrice = parseInt($('#InitialPrice').val());

                var currentPrice;
                if ($('#CurrentPrice').val() === '0') {
                    currentPrice = parseInt(initialPrice + value);
                }
                else {
                    var price = parseInt($('#CurrentPrice').val());
                    currentPrice = parseInt(price + value);
                }

                $('#CurrentPrice').val(currentPrice);

                var auctionId = $('#Id').val();
                var winnerId = $('#WinnerId').val();

                chat.server.send(receiverId, auctionId, value, currentPrice, winnerId);
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
            });
        });
    });
</script>


